// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Configuration;

namespace Assignment.Data.Models;

public partial class TutoringKidDbContext : DbContext
{
    public TutoringKidDbContext()
    {
    }

    public TutoringKidDbContext(DbContextOptions<TutoringKidDbContext> options)
        : base(options)
    {
    }

    public virtual DbSet<BoughtCourse> BoughtCourses { get; set; }

    public virtual DbSet<Category> Categories { get; set; }

    public virtual DbSet<Course> Courses { get; set; }

    public virtual DbSet<CourseCategory> CourseCategories { get; set; }

    public virtual DbSet<Lesson> Lessons { get; set; }

    public virtual DbSet<Order> Orders { get; set; }

    public virtual DbSet<OrderCourse> OrderCourses { get; set; }

    public virtual DbSet<Review> Reviews { get; set; }

    public virtual DbSet<Schedule> Schedules { get; set; }

    public virtual DbSet<ScheduleLesson> ScheduleLessons { get; set; }

    public virtual DbSet<Transaction> Transactions { get; set; }

    public virtual DbSet<TutorProfile> TutorProfiles { get; set; }

    public virtual DbSet<User> Users { get; set; }
    public static string GetConnectionString(string connectionStringName)
    {
        var config = new ConfigurationBuilder()
            .SetBasePath(AppDomain.CurrentDomain.BaseDirectory)
            .AddJsonFile("appsettings.json")
            .Build();

        string connectionString = config.GetConnectionString(connectionStringName);
        return connectionString;
    }
    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        => optionsBuilder.UseNpgsql(GetConnectionString("DefaultConnection"));

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<BoughtCourse>(entity =>
        {
            entity.HasIndex(e => e.ChildId, "IX_BoughtCourses_ChildId");

            entity.HasIndex(e => e.CourseId, "IX_BoughtCourses_CourseId");

            entity.HasIndex(e => e.UserId, "IX_BoughtCourses_UserId");

            entity.Property(e => e.Id).ValueGeneratedNever();

            entity.HasOne(d => d.Child).WithMany(p => p.BoughtCourseChildren)
                .HasForeignKey(d => d.ChildId)
                .OnDelete(DeleteBehavior.Cascade);

            entity.HasOne(d => d.Course).WithMany(p => p.BoughtCourses).HasForeignKey(d => d.CourseId);

            entity.HasOne(d => d.User).WithMany(p => p.BoughtCourseUsers).HasForeignKey(d => d.UserId);
        });

        modelBuilder.Entity<Category>(entity =>
        {
            entity.HasIndex(e => e.CreatedBy, "IX_Categories_CreatedBy");

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.Active).HasDefaultValue(false);
            entity.Property(e => e.CreatedAt).HasDefaultValueSql("(CURRENT_TIMESTAMP AT TIME ZONE 'UTC'::text)");
            entity.Property(e => e.Description)
                .IsRequired()
                .HasMaxLength(300);
            entity.Property(e => e.ImgUrl).HasMaxLength(1000);
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(100);

            entity.HasOne(d => d.CreatedByNavigation).WithMany(p => p.Categories).HasForeignKey(d => d.CreatedBy);
        });

        modelBuilder.Entity<Course>(entity =>
        {
            entity.HasIndex(e => e.Tutorid, "IX_Courses_Tutorid");

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CourseDetail).HasMaxLength(500);
            entity.Property(e => e.Description)
                .IsRequired()
                .HasMaxLength(300);
            entity.Property(e => e.Discount).HasDefaultValue(0);
            entity.Property(e => e.Metadata).HasMaxLength(1000);
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(100);
            entity.Property(e => e.SlotQuantity).HasDefaultValue(0);
            entity.Property(e => e.Status)
                .IsRequired()
                .HasDefaultValueSql("'Draft'::text");
            entity.Property(e => e.Thumbnail).HasMaxLength(1000);

            entity.HasOne(d => d.Tutor).WithMany(p => p.Courses).HasForeignKey(d => d.Tutorid);
        });

        modelBuilder.Entity<CourseCategory>(entity =>
        {
            entity.HasIndex(e => e.CategoryId, "IX_CourseCategories_CategoryId");

            entity.HasIndex(e => e.CourseId, "IX_CourseCategories_CourseId");

            entity.Property(e => e.Id).ValueGeneratedNever();

            entity.HasOne(d => d.Category).WithMany(p => p.CourseCategories).HasForeignKey(d => d.CategoryId);

            entity.HasOne(d => d.Course).WithMany(p => p.CourseCategories).HasForeignKey(d => d.CourseId);
        });

        modelBuilder.Entity<Lesson>(entity =>
        {
            entity.HasIndex(e => e.CourseId, "IX_Lessons_CourseId");

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.Content).HasMaxLength(500);
            entity.Property(e => e.CreatedAt).HasDefaultValueSql("(CURRENT_TIMESTAMP AT TIME ZONE 'UTC'::text)");
            entity.Property(e => e.Title)
                .IsRequired()
                .HasMaxLength(200);
            entity.Property(e => e.UpdatedAt).HasDefaultValueSql("(CURRENT_TIMESTAMP AT TIME ZONE 'UTC'::text)");

            entity.HasOne(d => d.Course).WithMany(p => p.Lessons).HasForeignKey(d => d.CourseId);
        });

        modelBuilder.Entity<Order>(entity =>
        {
            entity.HasIndex(e => e.CreatedBy, "IX_Orders_CreatedBy");

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedAt).HasDefaultValueSql("(CURRENT_TIMESTAMP AT TIME ZONE 'UTC'::text)");
            entity.Property(e => e.Status)
                .IsRequired()
                .HasDefaultValueSql("'Pending'::text");

            entity.HasOne(d => d.CreatedByNavigation).WithMany(p => p.Orders).HasForeignKey(d => d.CreatedBy);
        });

        modelBuilder.Entity<OrderCourse>(entity =>
        {
            entity.HasIndex(e => e.CourseId, "IX_OrderCourses_CourseId");

            entity.HasIndex(e => e.OrderId, "IX_OrderCourses_OrderId");

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.Discount).HasDefaultValue(0);

            entity.HasOne(d => d.Course).WithMany(p => p.OrderCourses).HasForeignKey(d => d.CourseId);

            entity.HasOne(d => d.Order).WithMany(p => p.OrderCourses).HasForeignKey(d => d.OrderId);
        });

        modelBuilder.Entity<Review>(entity =>
        {
            entity.HasIndex(e => e.CourseId, "IX_Reviews_CourseId");

            entity.HasIndex(e => e.CreatedBy, "IX_Reviews_CreatedBy");

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.Active).HasDefaultValue(false);
            entity.Property(e => e.Content)
                .IsRequired()
                .HasMaxLength(100);
            entity.Property(e => e.CreatedAt).HasDefaultValueSql("(CURRENT_TIMESTAMP AT TIME ZONE 'UTC'::text)");
            entity.Property(e => e.Title)
                .IsRequired()
                .HasMaxLength(100);

            entity.HasOne(d => d.Course).WithMany(p => p.Reviews).HasForeignKey(d => d.CourseId);

            entity.HasOne(d => d.CreatedByNavigation).WithMany(p => p.Reviews).HasForeignKey(d => d.CreatedBy);
        });

        modelBuilder.Entity<Schedule>(entity =>
        {
            entity.HasIndex(e => e.CourseId, "IX_Schedules_CourseId");

            entity.HasIndex(e => e.StudentId, "IX_Schedules_StudentId");

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedAt).HasDefaultValueSql("(CURRENT_TIMESTAMP AT TIME ZONE 'UTC'::text)");
            entity.Property(e => e.DayOfWeek)
                .IsRequired()
                .HasMaxLength(7);
            entity.Property(e => e.EndDate).HasDefaultValueSql("(CURRENT_DATE AT TIME ZONE 'UTC'::text)");
            entity.Property(e => e.EndTime).HasDefaultValueSql("(CURRENT_TIME AT TIME ZONE 'UTC'::text)");
            entity.Property(e => e.StartDate).HasDefaultValueSql("(CURRENT_DATE AT TIME ZONE 'UTC'::text)");
            entity.Property(e => e.StartTime).HasDefaultValueSql("(CURRENT_TIME AT TIME ZONE 'UTC'::text)");
            entity.Property(e => e.Status)
                .IsRequired()
                .HasDefaultValueSql("'InActive'::text");
            entity.Property(e => e.UpdatedAt).HasDefaultValueSql("(CURRENT_TIMESTAMP AT TIME ZONE 'UTC'::text)");

            entity.HasOne(d => d.Course).WithMany(p => p.Schedules).HasForeignKey(d => d.CourseId);

            entity.HasOne(d => d.Student).WithMany(p => p.Schedules)
                .HasForeignKey(d => d.StudentId)
                .OnDelete(DeleteBehavior.Cascade);
        });

        modelBuilder.Entity<ScheduleLesson>(entity =>
        {
            entity.HasIndex(e => e.LessonsId, "IX_ScheduleLessons_LessonsId");

            entity.HasIndex(e => e.ScheduleId, "IX_ScheduleLessons_ScheduleId");

            entity.Property(e => e.Id).ValueGeneratedNever();

            entity.HasOne(d => d.Lessons).WithMany(p => p.ScheduleLessons).HasForeignKey(d => d.LessonsId);

            entity.HasOne(d => d.Schedule).WithMany(p => p.ScheduleLessons).HasForeignKey(d => d.ScheduleId);
        });

        modelBuilder.Entity<Transaction>(entity =>
        {
            entity.HasIndex(e => e.CreatedBy, "IX_Transactions_CreatedBy");

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedAt).HasDefaultValueSql("(CURRENT_TIMESTAMP AT TIME ZONE 'UTC'::text)");
            entity.Property(e => e.Message)
                .IsRequired()
                .HasMaxLength(1000);

            entity.HasOne(d => d.CreatedByNavigation).WithMany(p => p.Transactions).HasForeignKey(d => d.CreatedBy);
        });

        modelBuilder.Entity<TutorProfile>(entity =>
        {
            entity.HasIndex(e => e.UserId, "IX_TutorProfiles_UserId");

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.Content)
                .IsRequired()
                .HasMaxLength(500);
            entity.Property(e => e.CreatedAt).HasDefaultValueSql("(CURRENT_TIMESTAMP AT TIME ZONE 'UTC'::text)");
            entity.Property(e => e.Meta).HasMaxLength(1000);
            entity.Property(e => e.Status)
                .IsRequired()
                .HasDefaultValueSql("'Draft'::text");
            entity.Property(e => e.Title)
                .IsRequired()
                .HasMaxLength(100);
            entity.Property(e => e.UpdatedAt).HasDefaultValueSql("(CURRENT_TIMESTAMP AT TIME ZONE 'UTC'::text)");

            entity.HasOne(d => d.User).WithMany(p => p.TutorProfiles).HasForeignKey(d => d.UserId);
        });

        modelBuilder.Entity<User>(entity =>
        {
            entity.HasIndex(e => e.Email, "IX_Users_Email").IsUnique();

            entity.HasIndex(e => e.ParentId, "IX_Users_ParentId");

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CreatedAt).HasDefaultValueSql("(CURRENT_TIMESTAMP AT TIME ZONE 'UTC'::text)");
            entity.Property(e => e.Email).IsRequired();
            entity.Property(e => e.FirstName)
                .IsRequired()
                .HasMaxLength(100);
            entity.Property(e => e.HashedPassword).HasMaxLength(100);
            entity.Property(e => e.LastLogin).HasDefaultValueSql("(CURRENT_TIMESTAMP AT TIME ZONE 'UTC'::text)");
            entity.Property(e => e.LastName)
                .IsRequired()
                .HasMaxLength(100);
            entity.Property(e => e.Meta).HasMaxLength(1000);
            entity.Property(e => e.Phone).HasMaxLength(20);
            entity.Property(e => e.ProfileUrl).HasMaxLength(1000);
            entity.Property(e => e.RefreshToken).HasMaxLength(1000);
            entity.Property(e => e.RefreshTokenExpires).HasDefaultValueSql("(CURRENT_TIMESTAMP AT TIME ZONE 'UTC'::text)");
            entity.Property(e => e.Role)
                .IsRequired()
                .HasDefaultValueSql("'Parent'::text");
            entity.Property(e => e.Status)
                .IsRequired()
                .HasDefaultValueSql("'NotVerified'::text");
            entity.Property(e => e.Token).HasMaxLength(1000);
            entity.Property(e => e.TokenExpires).HasDefaultValueSql("(CURRENT_TIMESTAMP AT TIME ZONE 'UTC'::text)");
            entity.Property(e => e.UpdatedAt).HasDefaultValueSql("(CURRENT_TIMESTAMP AT TIME ZONE 'UTC'::text)");
            entity.Property(e => e.UserName).HasMaxLength(35);

            entity.HasOne(d => d.Parent).WithMany(p => p.InverseParent)
                .HasForeignKey(d => d.ParentId)
                .OnDelete(DeleteBehavior.Cascade);
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}